


Fait :
-	création d'un process père et fork d'un fils
-	ajout de plusieurs fils
-	**transmission d'information entre fils et père via pipe (première idée, à remplacer par shared memory)
-	gestion d'un secteur de course par les fils
-	transmission de la position au père
-	représentation graphique de la position de chaque voiture et affichage par le père (le "contrôleur de course")
-	*explorer comment utiliser la mémoire partagée
-	*explorer comment marche les sémaphores pour protéger l'accès au code accédant aux ressources partagées
-	convertir le mécanisme de remontée d'information fils-père de pipe vers shmem (shared memory)
-	gérer les deux secteurs supplémentaires
-	gérer le nombre de tours à faire (simple)
-	gérer et afficher le nombre de tours faits
-	*explorer la gestion du temps précis (au niveau µs plutôt que seconde)
-	adapter la gestion du temps à la µs dans le programme
-	gérer et afficher au niveau du père/contrôleur de course le meilleur temps du secteur, pour chaque voiture individuellement
-   gérer et afficher au niveau du père/contrôleur de course le meilleur temps de chaque secteur et quelle voiture l'a fait
-   afficher le temps de course total de chaque voiture/pilote
-	afficher la place actuelle des cars/pilotes
-	*explorer la lecture des fichiers
-	*lire et afficher le fichier des pilotes
-	*lire et afficher le fichier des circuits
-	*permettre à l'utilisateur de choisir un circuit
-	gérer le nombre de tours à faire (le nombre de tours : le plus proche >= à 100 ou 300 km 
    en fonction de la taille du circuit)
-	assigner les pilotes dans la structure des voitures en mémoire partagée
-	*réfléchir à la structure de données nécessaire pour gérer le championnat sur toute l'année (pilotes x circuits)
-	afficher l'état actuel du championnat à l'écran
-	créer la structure championnat en mémoire et l'écrire dans un fichier
-	au début d'une course, lire le fichier championnat, et l'afficher
-   *permettre à l'utilisateur de choisir un type de course (Essai, Qualification, Sprint, Normal)
-   calculer nombre de tours par circuits (pour arriver à environ 300km par course)

-	gérer une course de type Normale (avec positions initiales et update fichier championnat à la fin)
    -	afficher le classement en temps réel (en fonction du temps de course total)    
    -	Le classement doit toujours être maintenu tout au long de la course (gérer les dépassements)
    -	Relever les temps dans les 3 secteurs à chaque passage pour chaque voiture
    -	Toujours savoir qui a le meilleur temps dans chacun des secteurs
    -   les 10 premiers reçoivent des points (25, 20, 15, 10, 8, 6, 5, 3, 2, 1)
    -	Conserver sur fichier le classement final
    -	Indiquer la différence de temps avec la voiture qui précède
    -   implémenter un accélérateur de temps
    -	Conserver sur fichier le classement final et les meilleurs S1, S2, S3 et le meilleur tour. 

-   gérer les séances d’essais (P1, P2, P3) :
    -   60 min max
    -	Relever les temps dans les 3 secteurs à chaque passage pour chaque voiture. Pour ce faire, vous devrez commencer par écrire un « générateur de temps » à l’aide du random. Le temps dans un secteur se situe entre 25 et 45 secondes, en gros.
    -	Toujours savoir qui a le meilleur temps dans chacun des secteurs

-	gérer une course de type Qualification (Q1, Q2, Q3)
    -   Q1 : 18min; Q2 : 15 min; Q3 : 12 min
    -	Relever les temps dans les 3 secteurs à chaque passage pour chaque voiture
    -	Toujours savoir qui a le meilleur temps dans chacun des secteurs

A faire :

-   pour course de type Normale
    -	Toujours savoir qui a le tour le plus rapide
    -	Conserver sur fichier le classement final et les meilleurs S1, S2, S3 et le meilleur tour. Dans le cas d’une course sprint, ce fichier déterminera l’ordre de départ de la course du dimanche.
    -	Savoir si la voiture est out (abandon) ; dans ce cas, elle sera classée en fin de classement
    -	Savoir si la voiture est aux stands (PIT), gérer le temps aux stands et faires sortir la voiture à sa place dans la course (généralement 2 ou 3 PIT par voitures)
    -	Le premier classement est l’ordre sur la grille de départ

-   pour les séances d'essais (P1, P2, P3)
    -	Classer les voitures en fonction de leur tour complet le plus rapide
    -	Indiquer la différence de temps avec la voiture qui précède
    -	Savoir si une voiture est aux stands (P)
    -	Savoir si une voiture est out (abandon de la séance)
    -	Dans ces 2 derniers cas, on conserve toujours le meilleur temps de la voiture et celle-ci reste dans le classement
    -	Conserver sur fichier le classement final à la fin de chaque séance ainsi que les meilleurs temps S1, S2 et S3 et le meilleur tour.

-	pour une course de type Qualification (Q1, Q2, Q3)
    -	A la fin de Q2, il reste 10 voitures qualifiées pour Q3 et les 5 dernières sont placées dans les 
    -	A la fin de Q1, il reste 15 voitures qualifiées pour Q2 et les 5 dernières sont placées à la fin de 
        la grille de départ (places 16 à 20)
        places 11 à 15 de la grille de départ
    -	Le classement de Q3 attribue les places 1 à 10 de la grille de départ
    -	Classer les voitures en fonction de leur tour complet le plus rapide
    -	Indiquer la différence de temps avec la voiture qui précède
    -	Savoir si une voiture est aux stands (P)
    -	Savoir si une voitures est out (abandon de la séance)
    -	Dans ces 2 derniers cas, on conserve toujours le meilleur temps de la voiture et celle-ci reste 
        dans le classement
    -	Conserver sur fichier le classement final à la fin des 3 séances (ce sera l’ordre de départ pour la 
        course sprint s’il y en a une ou pour la course du dimanche ), ainsi que les meilleurs temps en S1, 
        S2, S3 et le meilleur tour.
    -	inscrire sur fichier les résultats des Qualifications

-	gérer une course de type Sprint
    -   les 8 premiers reçoivent des points (dans l’ordre décroissant de 8 à 1).-   etc
    -	Conserver sur fichier le classement final et les meilleurs S1, S2, S3 et le meilleur tour. Dans le cas d’une course sprint, ce fichier déterminera l’ordre de départ de la course du dimanche.
-   vérifier si les sémaphores ont été utilisés là où ils sont nécessaires (le sont-ils vraiment ici ?)
-   améliorer gestion des erreurs
-   améliorer gestions des inputs

*: peut être fait indépendamment de l'intégration dans le programme principal
